{"ast":null,"code":"var _jsxFileName = \"/app/pages/editPlace/[editPlace].js\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport Layout from \"../../components/Layout\";\nimport Input from \"../../components/Input\";\nimport { VALIDATOR_REQUIRE, VALIDATOR_MINLENGTH } from \"../../utils/validators\";\nimport { useRouter } from \"next/router\";\nimport { places } from \"../../data\";\nimport { useForm } from \"../../hooks/useForm\";\nimport Link from 'next/link';\n\nconst editPlace = ({\n  findPlace\n}) => {\n  const router = useRouter();\n  console.log(findPlace); // console.log(router)\n  // const [formState, inputHandler] = useForm(\n  //   {\n  //     title: {\n  //       value: findPlace.title,\n  //       isValid: true,\n  //     },\n  //     description: {\n  //       value: findPlace.description,\n  //       isValid: true,\n  //     },\n  //     address: {\n  //       value: findPlace.address,\n  //       isValid: true,\n  //     },\n  //   },\n  //   true\n  // );\n  // const handleSubmit = (e) => {\n  //   e.preventDefault();\n  //   console.log(formState.inputs);\n  // };\n\n  return __jsx(Layout, {\n    title: \"Edit Place\",\n    subtitle: \"form to update an existing place\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 5\n    }\n  });\n}; // export async function getStaticPaths(){\n//   return { paths:[{params:editPlace}], fallback: false }\n//   }\n// export async function getStaticProps({params}) {\n//   const findPlace = places.find((place) => place.id === params.editPlace);\n//   return {\n//     props: findPlace\n//   }\n// };\n\n\neditPlace.getInitialProps = ({\n  query\n}) => {\n  const findPlace = places.find(place => place.id === params.editPlace);\n  return findPlace;\n};\n\nexport default editPlace;","map":{"version":3,"sources":["/app/pages/editPlace/[editPlace].js"],"names":["React","Layout","Input","VALIDATOR_REQUIRE","VALIDATOR_MINLENGTH","useRouter","places","useForm","Link","editPlace","findPlace","router","console","log","getInitialProps","query","find","place","id","params"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,yBAAnB;AACA,OAAOC,KAAP,MAAkB,wBAAlB;AACA,SAASC,iBAAT,EAA4BC,mBAA5B,QAAuD,wBAAvD;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,MAAT,QAAuB,YAAvB;AACA,SAASC,OAAT,QAAwB,qBAAxB;AACA,OAAOC,IAAP,MAAiB,WAAjB;;AAEA,MAAMC,SAAS,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAiB;AACjC,QAAMC,MAAM,GAAGN,SAAS,EAAxB;AACAO,EAAAA,OAAO,CAACC,GAAR,CAAYH,SAAZ,EAFiC,CAGjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SACE,MAAC,MAAD;AAAQ,IAAA,KAAK,EAAC,YAAd;AAA2B,IAAA,QAAQ,EAAC,kCAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAsDD,CA/ED,C,CAgFA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;;;AAEAD,SAAS,CAACK,eAAV,GAA4B,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAa;AACvC,QAAML,SAAS,GAAGJ,MAAM,CAACU,IAAP,CAAaC,KAAD,IAAWA,KAAK,CAACC,EAAN,KAAaC,MAAM,CAACV,SAA3C,CAAlB;AACA,SAAOC,SAAP;AACD,CAHD;;AAKA,eAAeD,SAAf","sourcesContent":["import React from \"react\";\nimport Layout from \"../../components/Layout\";\nimport Input from \"../../components/Input\";\nimport { VALIDATOR_REQUIRE, VALIDATOR_MINLENGTH } from \"../../utils/validators\";\nimport { useRouter } from \"next/router\";\nimport { places } from \"../../data\";\nimport { useForm } from \"../../hooks/useForm\";\nimport Link from 'next/link'\n\nconst editPlace = ({findPlace}) => {\n  const router = useRouter()\n  console.log(findPlace)\n  // console.log(router)\n  // const [formState, inputHandler] = useForm(\n  //   {\n  //     title: {\n  //       value: findPlace.title,\n  //       isValid: true,\n  //     },\n  //     description: {\n  //       value: findPlace.description,\n  //       isValid: true,\n  //     },\n  //     address: {\n  //       value: findPlace.address,\n  //       isValid: true,\n  //     },\n  //   },\n  //   true\n  // );\n  // const handleSubmit = (e) => {\n  //   e.preventDefault();\n  //   console.log(formState.inputs);\n  // };\n  return (\n    <Layout title=\"Edit Place\" subtitle=\"form to update an existing place\">\n      {/* {findPlace ? (\n        <form onSubmit={handleSubmit}>\n          <Input\n            id=\"title\"\n            name=\"Title\"\n            placeholder=\"Name of the place\"\n            icon=\"fa-landmark\"\n            onInput={inputHandler}\n            validators={[VALIDATOR_REQUIRE()]}\n            value={formState.inputs.title.value}\n            valid={formState.inputs.title.isValid}\n          />\n          <Input\n            id=\"description\"\n            name=\"Description\"\n            type=\"textarea\"\n            placeholder=\"About the place\"\n            onInput={inputHandler}\n            validators={[VALIDATOR_MINLENGTH(5)]}\n            value={formState.inputs.description.value}\n            valid={formState.inputs.description.isValid}\n          />\n          <Input\n            id=\"address\"\n            name=\"Address\"\n            placeholder=\"address\"\n            icon=\"fa-map-marked-alt\"\n            onInput={inputHandler}\n            validators={[VALIDATOR_REQUIRE()]}\n            value={formState.inputs.address.value}\n            valid={formState.inputs.address.isValid}\n          />\n          <div className=\"field is-grouped\">\n            <div className=\"control\">\n              <button\n                className=\"button is-primary\"\n                disabled={!formState.isValid}\n              >\n                Update\n              </button>\n            </div>\n            <p className=\"control\">\n              \n              <a onClick={()=>router.back()} className=\"button is-light\">Cancel</a>\n            </p>\n          </div>\n        </form>\n      ) : (\n        <p>error, could not find the place</p>\n      )} */}\n    </Layout>\n  );\n};\n// export async function getStaticPaths(){\n  \n//   return { paths:[{params:editPlace}], fallback: false }\n//   }\n// export async function getStaticProps({params}) {\n  \n//   const findPlace = places.find((place) => place.id === params.editPlace);\n\n//   return {\n//     props: findPlace\n//   }\n// };\n\neditPlace.getInitialProps = ({query}) => {\n  const findPlace = places.find((place) => place.id === params.editPlace);\n  return findPlace\n}\n\nexport default editPlace;\n"]},"metadata":{},"sourceType":"module"}