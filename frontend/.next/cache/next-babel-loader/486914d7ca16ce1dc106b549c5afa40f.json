{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar _this = this,\n    _jsxFileName = \"/app/components/Input.js\";\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from \"react\";\n\nvar Input = function Input(_ref) {\n  var _ref$type = _ref.type,\n      type = _ref$type === void 0 ? \"text\" : _ref$type,\n      _ref$placeholder = _ref.placeholder,\n      placeholder = _ref$placeholder === void 0 ? \"\" : _ref$placeholder,\n      name = _ref.name,\n      _ref$icon = _ref.icon,\n      icon = _ref$icon === void 0 ? null : _ref$icon;\n\n  var inputReducer = function inputReducer(state, action) {\n    switch (action.type) {\n      case 'CHANGE':\n        return _objectSpread({}, state, {\n          value: action.val,\n          isValid: true\n        });\n\n      default:\n        return state;\n    }\n  };\n\n  var _React$useReducer = React.useReducer(inputReducer, {\n    value: '',\n    isValid: false\n  }),\n      _React$useReducer2 = _slicedToArray(_React$useReducer, 2),\n      inputState = _React$useReducer2[0],\n      dispatch = _React$useReducer2[1];\n\n  var handleChange = function handleChange(e) {\n    dispatch({\n      type: 'CHANGE',\n      val: e.target.value\n    });\n  };\n\n  return __jsx(\"div\", {\n    className: \"field\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 5\n    }\n  }, __jsx(\"label\", {\n    className: \"label\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }\n  }, name), __jsx(\"div\", {\n    className: \"control \".concat(icon && 'has-icons-left'),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }\n  }, type === \"textarea\" ? __jsx(\"textarea\", {\n    className: \"textarea\",\n    placeholder: placeholder,\n    onChange: handleChange,\n    value: inputState.value,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 11\n    }\n  }) : __jsx(\"input\", {\n    className: \"input\",\n    type: type,\n    placeholder: placeholder,\n    onChange: handleChange,\n    value: inputState.value,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 11\n    }\n  }), __jsx(\"span\", {\n    className: \"icon is-small is-left\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 11\n    }\n  }, __jsx(\"i\", {\n    className: \"fas \".concat(icon),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }\n  })), \")}\"), inputState.isValid && __jsx(\"p\", {\n    className: \"help is-danger\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 30\n    }\n  }, \"This \", name, \" is invalid\"));\n};\n\nexport default Input;","map":{"version":3,"sources":["/app/components/Input.js"],"names":["React","Input","type","placeholder","name","icon","inputReducer","state","action","value","val","isValid","useReducer","inputState","dispatch","handleChange","e","target"],"mappings":";;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,IAAMC,KAAK,GAAG,SAARA,KAAQ,OAA4D;AAAA,uBAAzDC,IAAyD;AAAA,MAAzDA,IAAyD,0BAAlD,MAAkD;AAAA,8BAA1CC,WAA0C;AAAA,MAA1CA,WAA0C,iCAA5B,EAA4B;AAAA,MAAxBC,IAAwB,QAAxBA,IAAwB;AAAA,uBAAlBC,IAAkB;AAAA,MAAlBA,IAAkB,0BAAX,IAAW;;AAExE,MAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,KAAD,EAAQC,MAAR,EAAmB;AACtC,YAAOA,MAAM,CAACN,IAAd;AACE,WAAK,QAAL;AACE,iCACKK,KADL;AAEEE,UAAAA,KAAK,EAAED,MAAM,CAACE,GAFhB;AAGEC,UAAAA,OAAO,EAAE;AAHX;;AAKF;AACE,eAAOJ,KAAP;AARJ;AAUD,GAXD;;AAFwE,0BAe3CP,KAAK,CAACY,UAAN,CAAiBN,YAAjB,EAA+B;AAACG,IAAAA,KAAK,EAAC,EAAP;AAAWE,IAAAA,OAAO,EAAE;AAApB,GAA/B,CAf2C;AAAA;AAAA,MAejEE,UAfiE;AAAA,MAerDC,QAfqD;;AAiBxE,MAAMC,YAAY,GAAG,SAAfA,YAAe,CAAAC,CAAC,EAAI;AAC5BF,IAAAA,QAAQ,CAAC;AAACZ,MAAAA,IAAI,EAAE,QAAP;AAAiBQ,MAAAA,GAAG,EAAEM,CAAC,CAACC,MAAF,CAASR;AAA/B,KAAD,CAAR;AACG,GAFD;;AAIA,SACE;AAAK,IAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAO,IAAA,SAAS,EAAC,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA0BL,IAA1B,CADF,EAEE;AAAK,IAAA,SAAS,oBAAaC,IAAI,IAAI,gBAArB,CAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGH,IAAI,KAAK,UAAT,GACC;AAAU,IAAA,SAAS,EAAC,UAApB;AAA+B,IAAA,WAAW,EAAEC,WAA5C;AAAyD,IAAA,QAAQ,EAAEY,YAAnE;AAAiF,IAAA,KAAK,EAAEF,UAAU,CAACJ,KAAnG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,GAGC;AACA,IAAA,SAAS,EAAC,OADV;AAEA,IAAA,IAAI,EAAEP,IAFN;AAGA,IAAA,WAAW,EAAEC,WAHb;AAIA,IAAA,QAAQ,EAAEY,YAJV;AAKA,IAAA,KAAK,EAAEF,UAAU,CAACJ,KALlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJJ,EAaI;AAAM,IAAA,SAAS,EAAC,uBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAG,IAAA,SAAS,gBAASJ,IAAT,CAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAbJ,OAFF,EAoBGQ,UAAU,CAACF,OAAX,IAAsB;AAAG,IAAA,SAAS,EAAC,gBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAoCP,IAApC,gBApBzB,CADF;AAwBD,CA7CD;;AA+CA,eAAeH,KAAf","sourcesContent":["import React from \"react\";\n\nconst Input = ({ type = \"text\", placeholder = \"\", name, icon = null }) => {\n\n  const inputReducer = (state, action) => {\n    switch(action.type) {\n      case 'CHANGE':\n        return {\n          ...state,\n          value: action.val,\n          isValid: true\n        };\n      default:\n        return state\n    }\n  }\n\n  const [inputState, dispatch]=React.useReducer(inputReducer, {value:'', isValid: false})\n\n  const handleChange = e => {\ndispatch({type: 'CHANGE', val: e.target.value})\n  }\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\">{name}</label>\n      <div className={`control ${icon && 'has-icons-left'}`}>\n        {type === \"textarea\" ? \n          <textarea className=\"textarea\" placeholder={placeholder} onChange={handleChange} value={inputState.value}></textarea>\n         : \n          <input \n          className='input'\n          type={type} \n          placeholder={placeholder} \n          onChange={handleChange} \n          value={inputState.value}\n          />\n\n        }\n          <span className=\"icon is-small is-left\">\n            <i className={`fas ${icon}`}></i>\n          </span>\n        )}\n      </div>\n      {inputState.isValid && <p className=\"help is-danger\">This {name} is invalid</p>}\n    </div>\n  );\n};\n\nexport default Input;\n"]},"metadata":{},"sourceType":"module"}