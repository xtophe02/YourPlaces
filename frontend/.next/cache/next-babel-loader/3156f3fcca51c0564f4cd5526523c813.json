{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\n\nconst formReducer = (state, action) => {\n  switch (action.type) {\n    case \"INPUT_CHANGE\":\n      let formIsValid = true;\n\n      for (const inputId in state.inputs) {\n        if (inputId === action.inputId) {\n          formIsValid = formIsValid && action.isValid;\n        } else {\n          formIsValid = formIsValid && state.inputs[inputId].isValid;\n        }\n      }\n\n      return _objectSpread({}, state, {\n        inputs: _objectSpread({}, state.inputs, {\n          [action.inputId]: {\n            value: action.value,\n            isValid: action.isValid\n          }\n        }),\n        isValid: formIsValid\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport const useForm = (initialInputs, initialFormValidity) => {\n  const [formState, dispatch] = React.useReducer(formReducer, {\n    inputs: initialInputs,\n    isValid: initialFormValidity\n  });\n  const inputHandler = React.useCallback((id, value, isValid) => {\n    dispatch({\n      type: \"INPUT_CHANGE\",\n      value: value,\n      isValid: isValid,\n      inputId: id\n    });\n  }, []);\n  return [formState, inputHandler];\n};","map":{"version":3,"sources":["/app/hooks/useForm.js"],"names":["React","formReducer","state","action","type","formIsValid","inputId","inputs","isValid","value","useForm","initialInputs","initialFormValidity","formState","dispatch","useReducer","inputHandler","useCallback","id"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEC,MAAMC,WAAW,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACtC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,cAAL;AACE,UAAIC,WAAW,GAAG,IAAlB;;AACA,WAAK,MAAMC,OAAX,IAAsBJ,KAAK,CAACK,MAA5B,EAAoC;AAClC,YAAID,OAAO,KAAKH,MAAM,CAACG,OAAvB,EAAgC;AAC9BD,UAAAA,WAAW,GAAGA,WAAW,IAAIF,MAAM,CAACK,OAApC;AACD,SAFD,MAEO;AACLH,UAAAA,WAAW,GAAGA,WAAW,IAAIH,KAAK,CAACK,MAAN,CAAaD,OAAb,EAAsBE,OAAnD;AACD;AACF;;AACD,+BACKN,KADL;AAEEK,QAAAA,MAAM,oBACDL,KAAK,CAACK,MADL;AAEJ,WAACJ,MAAM,CAACG,OAAR,GAAkB;AAAEG,YAAAA,KAAK,EAAEN,MAAM,CAACM,KAAhB;AAAuBD,YAAAA,OAAO,EAAEL,MAAM,CAACK;AAAvC;AAFd,UAFR;AAMEA,QAAAA,OAAO,EAAEH;AANX;;AAQF;AACE,aAAOH,KAAP;AAnBJ;AAqBD,CAtBA;;AAwBD,OAAO,MAAMQ,OAAO,GAAG,CAACC,aAAD,EAAgBC,mBAAhB,KAAwC;AAE7D,QAAM,CAACC,SAAD,EAAYC,QAAZ,IAAwBd,KAAK,CAACe,UAAN,CAAiBd,WAAjB,EAA8B;AAC1DM,IAAAA,MAAM,EAAEI,aADkD;AAE1DH,IAAAA,OAAO,EAAEI;AAFiD,GAA9B,CAA9B;AAKA,QAAMI,YAAY,GAAGhB,KAAK,CAACiB,WAAN,CAAkB,CAACC,EAAD,EAAKT,KAAL,EAAYD,OAAZ,KAAwB;AAC7DM,IAAAA,QAAQ,CAAC;AACPV,MAAAA,IAAI,EAAE,cADC;AAEPK,MAAAA,KAAK,EAAEA,KAFA;AAGPD,MAAAA,OAAO,EAAEA,OAHF;AAIPF,MAAAA,OAAO,EAAEY;AAJF,KAAD,CAAR;AAMD,GAPoB,EAOlB,EAPkB,CAArB;AASA,SAAO,CAACL,SAAD,EAAYG,YAAZ,CAAP;AACD,CAjBM","sourcesContent":["import React from 'react'\n\n const formReducer = (state, action) => {\n  switch (action.type) {\n    case \"INPUT_CHANGE\":\n      let formIsValid = true;\n      for (const inputId in state.inputs) {\n        if (inputId === action.inputId) {\n          formIsValid = formIsValid && action.isValid;\n        } else {\n          formIsValid = formIsValid && state.inputs[inputId].isValid;\n        }\n      }\n      return {\n        ...state,\n        inputs: {\n          ...state.inputs,\n          [action.inputId]: { value: action.value, isValid: action.isValid },\n        },\n        isValid: formIsValid,\n      };\n    default:\n      return state;\n  }\n};\n\nexport const useForm = (initialInputs, initialFormValidity) => {\n \n  const [formState, dispatch] = React.useReducer(formReducer, {\n    inputs: initialInputs,\n    isValid: initialFormValidity,\n  });\n\n  const inputHandler = React.useCallback((id, value, isValid) => {\n    dispatch({\n      type: \"INPUT_CHANGE\",\n      value: value,\n      isValid: isValid,\n      inputId: id,\n    });\n  }, []);\n  \n  return [formState, inputHandler]\n}\n\n\n"]},"metadata":{},"sourceType":"module"}