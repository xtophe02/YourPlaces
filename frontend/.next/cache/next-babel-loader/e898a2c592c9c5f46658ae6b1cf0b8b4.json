{"ast":null,"code":"var _jsxFileName = \"/app/components/Input.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from \"react\";\nimport { validate } from '../utils/validators';\n\nconst Input = ({\n  type = \"text\",\n  placeholder = \"\",\n  name,\n  icon = null,\n  validators\n}) => {\n  const inputReducer = (state, action) => {\n    switch (action.type) {\n      case \"CHANGE\":\n        return _objectSpread({}, state, {\n          value: action.val,\n          isValid: validate(action.val, action.validators)\n        });\n\n      case 'TOUCH':\n        return _objectSpread({}, state, {\n          isTouched: true\n        });\n\n      default:\n        return state;\n    }\n  };\n\n  const [inputState, dispatch] = React.useReducer(inputReducer, {\n    value: \"\",\n    isValid: false,\n    isTouched: false\n  });\n\n  const handleChange = e => {\n    dispatch({\n      type: \"CHANGE\",\n      val: e.target.value,\n      validators\n    });\n  };\n\n  const handleBlur = e => {\n    dispatch({\n      type: \"TOUCH\"\n    });\n  };\n\n  return __jsx(\"div\", {\n    className: \"field\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 5\n    }\n  }, __jsx(\"label\", {\n    className: \"label\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }\n  }, name), __jsx(\"div\", {\n    className: `control ${icon && \"has-icons-left\"}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }\n  }, type === \"textarea\" ? __jsx(\"textarea\", {\n    className: `textarea ${!inputState.isValid && inputState.isTouched && 'is-danger'}`,\n    placeholder: placeholder,\n    onChange: handleChange,\n    value: inputState.value,\n    onBlur: handleBlur,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 11\n    }\n  }) : __jsx(\"input\", {\n    className: `input ${!inputState.isValid && inputState.isTouched && 'is-danger'}`,\n    type: type,\n    placeholder: placeholder,\n    onChange: handleChange,\n    value: inputState.value,\n    onBlur: handleBlur,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 11\n    }\n  }), icon && __jsx(\"span\", {\n    className: \"icon is-small is-left\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 11\n    }\n  }, __jsx(\"i\", {\n    className: `fas ${icon}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }\n  }))), !inputState.isValid && inputState.isTouched && __jsx(\"p\", {\n    className: \"help is-danger\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }\n  }, \"This \", name, \" is invalid\"));\n};\n\nexport default Input;","map":{"version":3,"sources":["/app/components/Input.js"],"names":["React","validate","Input","type","placeholder","name","icon","validators","inputReducer","state","action","value","val","isValid","isTouched","inputState","dispatch","useReducer","handleChange","e","target","handleBlur"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport {validate} from '../utils/validators'\n\nconst Input = ({ type = \"text\", placeholder = \"\", name, icon = null, validators }) => {\n  const inputReducer = (state, action) => {\n    switch (action.type) {\n      case \"CHANGE\":\n        return {\n          ...state,\n          value: action.val,\n          isValid: validate(action.val, action.validators),\n        };\n      \n      case 'TOUCH':\n        return{...state, isTouched: true}\n      default:\n        return state;\n    }\n  };\n\n  const [inputState, dispatch] = React.useReducer(inputReducer, {\n    value: \"\",\n    isValid: false,\n    isTouched: false\n  });\n\n  const handleChange = (e) => {\n    dispatch({ type: \"CHANGE\", val: e.target.value, validators });\n  };\n  const handleBlur = (e) => {\n    dispatch({ type: \"TOUCH\"});\n  };\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\">{name}</label>\n      <div className={`control ${icon && \"has-icons-left\"}`}>\n        {type === \"textarea\" ? (\n          <textarea\n            className={`textarea ${!inputState.isValid && inputState.isTouched && 'is-danger'}`}\n            placeholder={placeholder}\n            onChange={handleChange}\n            value={inputState.value}\n            onBlur={handleBlur}\n          ></textarea>\n        ) : (\n          <input\n            className={`input ${!inputState.isValid && inputState.isTouched && 'is-danger'}`}\n            type={type}\n            placeholder={placeholder}\n            onChange={handleChange}\n            value={inputState.value}\n            onBlur={handleBlur}\n          />\n        )}\n        {icon && (\n          <span className=\"icon is-small is-left\">\n            <i className={`fas ${icon}`}></i>\n          </span>\n        )}\n      </div>\n      {!inputState.isValid && inputState.isTouched && (\n        <p className=\"help is-danger\">This {name} is invalid</p>\n      )}\n    </div>\n  );\n};\n\nexport default Input;\n"]},"metadata":{},"sourceType":"module"}